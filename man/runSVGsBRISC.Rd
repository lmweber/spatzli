% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/runSVGsBRISC.R
\name{runSVGsBRISC}
\alias{runSVGsBRISC}
\title{runSVGsBRISC}
\usage{
runSVGsBRISC(spe, x = NULL, n_threads = 1, verbose = FALSE)
}
\arguments{
\item{spe}{\code{SpatialExperiment} Input object, assumed to be a
\code{SpatialExperiment} containing an assay named \code{logcounts} and
spatial coordinates accessible with \code{spatialCoords()}.}

\item{x}{\code{numeric matrix} Matrix of covariates, with number of rows
(spots) matching the number of columns (spots) in \code{spe}. Default =
NULL, which is an intercept-only model. See \code{BRISC} documentation for
more details.}

\item{n_threads}{\code{integer} Number of threads for parallelization.
Default = 1.}

\item{verbose}{\code{logical} Whether to display verbose output from
\code{BRISC}. Default = FALSE.}
}
\value{
Returns summary statistics and SVG ranks as new columns in
  \code{rowData} in \code{spe} object.
}
\description{
Run method to identify spatially variable genes (SVGs) using BRISC
}
\details{
Identify top SVGs using BRISC ("bootstrap for rapid inference on spatial
covariances") methodology developed by Saha and Datta (2018).

This function runs BRISC separately for each gene, using parallelization for
faster runtime using one core per BRISC run. The main outputs of interest are
the covariance parameter estimates stored in 'Theta' in the BRISC output. We
use these estimates to calculate summary values 'ratio_sv' defined as
'sigma.sq / tau.sq' (ratio of spatial to non-spatial variance), and 'prop_sv'
defined as 'sigma.sq / (sigma.sq + tau.sq)' (proportion of spatial variance
out of total variance), which can be used to rank SVGs.

The current version does not run the BRISC bootstrap inference step on the
parameter estimates, since this is much slower.

Assumes the input object is a \code{SpatialExperiment} containing an assay
named \code{logcounts} and filtered to exclude low-expressed genes, e.g. as
prepared with \code{\link{preprocessSVGs}}.
}
\examples{
library(SpatialExperiment)
library(STexampleData)
library(spatzli)

spe <- Visium_humanDLPFC()

spe <- preprocessSVGs(spe)

# subset 1 gene
spe_1 <- spe[1, ]
spe_1 <- runSVGsBRISC(spe_1, x = NULL, n_threads = 1, verbose = TRUE)

# subset 100 genes
# spe_100 <- spe[1:100, ]
# spe_100 <- runSVGsBRISC(spe_100, x = NULL, n_threads = 1)

}
